{"file_count":84,"config_file_count":9,"language":{"count":53,"known":{"CSS":1,"GCC Machine Description":6,"HCL":9,"HTML":3,"HTML+ERB":1,"Ignore List":1,"JSON":1,"JavaScript":3,"Ruby":22,"Shell":2,"Text":1,"Unknown":31,"YAML":3},"unknown":["CODEOWNERS","docker-example/Dockerfile","example-rails-app/Gemfile","example-rails-app/Gemfile.lock","example-rails-app/Rakefile","example-rails-app/app/assets/images/rails.png","example-rails-app/app/mailers/.gitkeep","example-rails-app/app/models/.gitkeep","example-rails-app/bin/bundle","example-rails-app/bin/rails","example-rails-app/bin/rake","example-rails-app/bin/setup","example-rails-app/db/development.sqlite3","example-rails-app/doc/README_FOR_APP","example-rails-app/lib/assets/.gitkeep","example-rails-app/lib/tasks/.gitkeep","example-rails-app/log/.gitkeep","example-rails-app/log/development.log","example-rails-app/public/favicon.ico","example-rails-app/script/rails","example-rails-app/test/fixtures/.gitkeep","example-rails-app/test/functional/.gitkeep","example-rails-app/test/integration/.gitkeep","example-rails-app/test/unit/.gitkeep","example-rails-app/tmp/cache/assets/404/FB1/sprockets%2Fv3.0%2FBl90b2W_x-luH9JpUId0e9HoWLbCr1b6Sm5ouFF3vUU","example-rails-app/tmp/cache/assets/456/621/sprockets%2Fv3.0%2FiF87pDOFHbUvx-m34Et4rFyJc0pzK1Q1bdjoUVQzK7g","example-rails-app/tmp/cache/assets/49C/BC1/sprockets%2Fv3.0%2F5eQEx6JCkKrKTqU4gDwP6WAiUuEgpSEFvrp3Vmkc_08","example-rails-app/tmp/cache/assets/4EE/7F1/sprockets%2Fv3.0%2F9PIO2pMXjcKtNTwGlShXht2vejB3dKZSupd8-1UWuds","example-rails-app/vendor/assets/javascripts/.gitkeep","example-rails-app/vendor/assets/stylesheets/.gitkeep","example-rails-app/vendor/plugins/.gitkeep"]},"file":[{"name":"terraform-example-basic/main.tf","type":"Terraform","extension":"HCL","output_policy":"msg: policy applied successfully","applied_policy":"not found","content":"# Configure the AWS Provider\nprovider \"aws\" {\n  region = \"us-east-2\"\n}\n\n# Create an EC2 instance\nresource \"aws_instance\" \"example\" {\n  # AMI ID for Amazon Linux AMI 2018.03.0 (HVM)\n  ami           = \"ami-0c64dd618a49aeee8\"\n  instance_type = \"t3.micro\"\n\n  tags = {\n    Name = \"example\"\n  }\n}\n\n"},{"name":"terraform-example-full/main.tf","type":"Terraform","extension":"HCL","output_policy":"msg: policy applied successfully","applied_policy":"not found","content":"# Configure the AWS Provider\nprovider \"aws\" {\n  region = \"us-east-2\"\n}\n\n# This shows an example of how to use a Terraform module.\n\nmodule \"example_rails_app_stage\" {\n  # The source field can be a path on your file system or a Git URL (even a versioned one!)\n  source = \"./rails-module\"\n\n  # Pass parameters to the module\n  name          = \"Example Rails App (Stage)\"\n  port          = 3000\n  ami           = var.ami\n  key_pair_name = var.key_pair_name\n}\n\nmodule \"example_rails_app_prod\" {\n  # The source field can be a path on your file system or a Git URL (even a versioned one!)\n  source = \"./rails-module\"\n\n  # Pass parameters to the module\n  name          = \"Example Rails App\"\n  port          = 8080\n  ami           = var.ami\n  key_pair_name = var.key_pair_name\n}\n"},{"name":"terraform-example-full/outputs.tf","type":"Terraform","extension":"HCL","output_policy":"msg: policy applied successfully","applied_policy":"not found","content":"# Output EC2 instance URL from the example_rails_app_stage module\noutput \"stage_url\" {\n  value = module.example_rails_app_stage.url\n}\n\n# Output EC2 instance URL from the example_rails_app_prod module\noutput \"prod_url\" {\n  value = module.example_rails_app_prod.url\n}\n"},{"name":"terraform-example-full/rails-module/main.tf","type":"Terraform","extension":"HCL","output_policy":"msg: policy applied successfully","applied_policy":"not found","content":"# Create an EC2 instance\nresource \"aws_instance\" \"example_rails_app\" {\n  ami             = var.ami\n  instance_type   = \"t3.micro\"\n  security_groups = [aws_security_group.example_rails_app.name]\n  user_data       = data.template_file.user_data.rendered\n  key_name        = var.key_pair_name\n\n  tags = {\n    Name = var.name\n  }\n}\n\n# A User Data script that will run when the EC2 instance boots up and start the Ruby on Rails server\ndata \"template_file\" \"user_data\" {\n  template = file(\"${path.module}/user-data.sh\")\n\n  vars = {\n    port = var.port\n  }\n}\n\n# A Security Group that controls what network traffic can go in and out of the EC2 instance\nresource \"aws_security_group\" \"example_rails_app\" {\n  name        = var.name\n  description = \"A Security Group for ${var.name}\"\n\n  # Inbound HTTP from anywhere\n  ingress {\n    from_port   = var.port\n    to_port     = var.port\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  # Inbound SSH from anywhere\n  ingress {\n    from_port   = 22\n    to_port     = 22\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  # Outbound everything\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n}\n"},{"name":"terraform-example-full/rails-module/outputs.tf","type":"Terraform","extension":"HCL","output_policy":"msg: policy applied successfully","applied_policy":"not found","content":"# Output the URL of the EC2 instance after the templates are applied\noutput \"url\" {\n  value = \"http://${aws_instance.example_rails_app.public_ip}:${var.port}\"\n}\n"},{"name":"terraform-example-full/rails-module/vars.tf","type":"Terraform","extension":"HCL","output_policy":"msg: policy applied successfully","applied_policy":"not found","content":"variable \"name\" {\n  description = \"The name used to namespace resources created by this module\"\n  type        = string\n}\n\nvariable \"ami\" {\n  description = \"The ID of the AMI that has Ruby on Rails installed and contains the code from the example-rails-app\"\n  type        = string\n}\n\nvariable \"key_pair_name\" {\n  description = \"The name of a Key Pair that you've created in AWS and have saved on your computer. You will be able to use this Key Pair to SSH to the EC2 instance.\"\n  type        = string\n}\n\nvariable \"port\" {\n  description = \"The port the Ruby on Rails app should listen on for HTTP requests\"\n  type        = number\n}\n"},{"name":"terraform-example-full/vars.tf","type":"Terraform","extension":"HCL","output_policy":"msg: policy applied successfully","applied_policy":"not found","content":"# ---------------------------------------------------------------------------------------------------------------------\n# ENVIRONMENT VARIABLES\n# Define these secrets as environment variables\n# ---------------------------------------------------------------------------------------------------------------------\n\n# AWS_ACCESS_KEY_ID\n# AWS_SECRET_ACCESS_KEY\n\n# ---------------------------------------------------------------------------------------------------------------------\n# MODULE PARAMETERS\n# These variables are expected to be passed in by the operator\n# ---------------------------------------------------------------------------------------------------------------------\n\nvariable \"ami\" {\n  description = \"The ID of the AMI that has Ruby on Rails installed and contains the code from the example-rails-app\"\n  type        = string\n}\n\nvariable \"key_pair_name\" {\n  description = \"The name of a Key Pair that you've created in AWS and have saved on your computer. You will be able to use this Key Pair to SSH to the EC2 instance.\"\n  type        = string\n}\n"},{"name":"terraform-example-s3-backend/main.tf","type":"Terraform","extension":"HCL","output_policy":"msg: policy applied successfully","applied_policy":"not found","content":"# Configure the Terraform backend\nterraform {\n  backend \"s3\" {\n    # Be sure to change this bucket name and region to match an S3 Bucket you have already created!\n    bucket = \"gruntwork-iac-training\"\n    region = \"us-west-2\"\n    key    = \"terraform.tfstate\"\n  }\n}\n\n# Configure the AWS Provider\nprovider \"aws\" {\n  region = \"us-east-2\"\n}\n\n# Get the latest Amazon Linux AMI\ndata \"aws_ami\" \"amzn_linux\" {\n  most_recent = true\n  owners      = [\"amazon\"]\n\n  filter {\n    name   = \"root-device-type\"\n    values = [\"ebs\"]\n  }\n\n  filter {\n    name   = \"name\"\n    values = [\"amzn-ami-hvm-*\"]\n  }\n}\n\n# Create an EC2 instance\nresource \"aws_instance\" \"example\" {\n  ami           = data.aws_ami.amzn_linux.image_id\n  instance_type = \"t3.micro\"\n  key_name      = var.key_pair_name\n\n  tags = {\n    Name = var.ec2_name\n  }\n}\n"},{"name":"terraform-example-s3-backend/vars.tf","type":"Terraform","extension":"HCL","output_policy":"msg: policy applied successfully","applied_policy":"not found","content":"# ---------------------------------------------------------------------------------------------------------------------\n# ENVIRONMENT VARIABLES\n# Define these secrets as environment variables\n# ---------------------------------------------------------------------------------------------------------------------\n\n# AWS_ACCESS_KEY_ID\n# AWS_SECRET_ACCESS_KEY\n\n# ---------------------------------------------------------------------------------------------------------------------\n# MODULE PARAMETERS\n# These variables are expected to be passed in by the operator\n# ---------------------------------------------------------------------------------------------------------------------\n\nvariable \"ec2_name\" {\n  description = \"The name of the EC2 Instance.\"\n  type        = string\n}\n\nvariable \"key_pair_name\" {\n  description = \"The name of a Key Pair that you've created in AWS and have saved on your computer. You will be able to use this Key Pair to SSH to the EC2 instance.\"\n  type        = string\n}\n"}]}
