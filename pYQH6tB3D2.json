{"file":[{"name":"android-example/app/build.gradle","type":"Gradle","content":"apply plugin: 'com.android.application'\n\nandroid {\n    compileSdkVersion 25\n    defaultConfig {\n        applicationId \"demo.micronautdiandroid\"\n        minSdkVersion 25\n        targetSdkVersion 25\n        versionCode 1\n        versionName \"1.0\"\n        testInstrumentationRunner \"android.support.test.runner.AndroidJUnitRunner\"\n    }\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n        }\n    }\n    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_1_8\n        targetCompatibility JavaVersion.VERSION_1_8\n    }\n    lintOptions {\n        lintOptions { warning 'InvalidPackage' }\n    }\n    packagingOptions {\n        exclude 'META-INF/spring-configuration-metadata.json'\n        exclude 'META-INF/config-properties.adoc'\n    }\n}\n\nrepositories {\n    maven { url 'https://maven.repository.redhat.com/ga/' }\n    mavenLocal()\n}\n\ndependencies {\n    implementation fileTree(include: ['*.jar'], dir: 'libs')\n    implementation 'com.android.support.constraint:constraint-layout:1.0.2'\n    testImplementation 'junit:junit:4.12'\n    androidTestImplementation 'com.android.support.test:runner:1.0.1'\n    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'\n    annotationProcessor \"io.micronaut:micronaut-inject-java:${micronautVersion}\"\n    compileOnly \"io.micronaut:micronaut-inject-java:${micronautVersion}\"\n    implementation \"io.micronaut:micronaut-runtime:${micronautVersion}\"\n}\n"},{"name":"android-example/build.gradle","type":"Gradle","content":"// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\nbuildscript {\n    \n    repositories {\n        google()\n        jcenter()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:3.3.0'\n\n\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n    }\n}\n\nallprojects {\n    repositories {\n        google()\n        jcenter()\n    }\n}\n\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}\n"},{"name":"android-example/settings.gradle","type":"Gradle","content":"include ':app'\n"},{"name":"hello-world-groovy/Dockerfile","type":"Docker","content":"FROM adoptopenjdk/openjdk11-openj9:jdk-11.0.1.13-alpine-slim\nCOPY build/libs/example-*-all.jar example.jar\nEXPOSE 8080\nCMD java -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -Dcom.sun.management.jmxremote -noverify ${JAVA_OPTS} -jar example.jar"},{"name":"hello-world-groovy/build.gradle","type":"Gradle","content":"plugins {\n    id \"groovy\"\n    id \"com.github.johnrengelman.shadow\" version \"5.0.0\"\n    id \"application\"\n}\n\nversion \"0.1\"\ngroup \"example\"\n\nrepositories {\n    mavenCentral()\n    maven { url \"https://jcenter.bintray.com\" }\n}\n\nconfigurations {\n    // for dependencies that are needed for development only\n    developmentOnly \n}\n\ndependencies {\n    compileOnly platform(\"io.micronaut:micronaut-bom:$micronautVersion\")\n    compileOnly \"io.micronaut:micronaut-inject-groovy\"\n    compileOnly \"io.micronaut.configuration:micronaut-openapi\"\n    implementation platform(\"io.micronaut:micronaut-bom:$micronautVersion\")\n    implementation \"io.swagger.core.v3:swagger-annotations\"\n    implementation \"io.micronaut:micronaut-runtime-groovy\"\n    implementation \"io.micronaut:micronaut-validation\"\n    implementation \"io.micronaut:micronaut-http-server-netty\"\n    implementation \"io.micronaut:micronaut-http-client\"\n    runtimeOnly \"ch.qos.logback:logback-classic:1.2.3\"\n    testCompileOnly platform(\"io.micronaut:micronaut-bom:$micronautVersion\")\n    testImplementation(\"org.spockframework:spock-core\") {\n        exclude group: \"org.codehaus.groovy\", module: \"groovy-all\"\n    }\n    testImplementation \"io.micronaut:micronaut-inject-groovy\"\n    testImplementation \"io.micronaut.test:micronaut-test-spock\"\n    testImplementation \"io.micronaut.test:micronaut-test-junit5\"\n    testRuntimeOnly \"org.junit.vintage:junit-vintage-engine:5.5.0\"\n}\n\ntest.classpath += configurations.developmentOnly\n\nmainClassName = \"example.Application\"\ntasks.withType(GroovyCompile) {\n    groovyOptions.forkOptions.jvmArgs.add('-Dgroovy.parameters=true')\n}\n\nshadowJar {\n    mergeServiceFiles()\n}\n\nrun.classpath += configurations.developmentOnly\nrun.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')\n"},{"name":"hello-world-java/Dockerfile","type":"Docker","content":"FROM adoptopenjdk/openjdk11-openj9:jdk-11.0.1.13-alpine-slim\nCOPY build/libs/example-*-all.jar example.jar\nEXPOSE 8080\nCMD java -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -Dcom.sun.management.jmxremote -noverify ${JAVA_OPTS} -jar example.jar"},{"name":"hello-world-java/build.gradle","type":"Gradle","content":"plugins {\n    id \"net.ltgt.apt-eclipse\" version \"0.21\"\n    id \"com.github.johnrengelman.shadow\" version \"5.0.0\"\n    id \"application\"\n}\n\nversion \"0.1\"\ngroup \"example\"\n\nrepositories {\n    mavenCentral()\n    maven { url \"https://jcenter.bintray.com\" }\n}\n\nconfigurations {\n    // for dependencies that are needed for development only\n    developmentOnly \n}\n\ndependencies {\n    annotationProcessor platform(\"io.micronaut:micronaut-bom:$micronautVersion\")\n    annotationProcessor \"io.micronaut:micronaut-inject-java\"\n    annotationProcessor \"io.micronaut:micronaut-validation\"\n    annotationProcessor \"io.micronaut.configuration:micronaut-openapi\"\n    implementation platform(\"io.micronaut:micronaut-bom:$micronautVersion\")\n    implementation \"io.micronaut:micronaut-inject\"\n    implementation \"io.swagger.core.v3:swagger-annotations\"\n    implementation \"io.micronaut:micronaut-validation\"\n    implementation \"io.micronaut:micronaut-runtime\"\n    implementation \"io.micronaut:micronaut-http-server-netty\"\n    implementation \"io.micronaut:micronaut-http-client\"\n    runtimeOnly \"ch.qos.logback:logback-classic:1.2.3\"\n    testAnnotationProcessor platform(\"io.micronaut:micronaut-bom:$micronautVersion\")\n    testAnnotationProcessor \"io.micronaut:micronaut-inject-java\"\n    testImplementation \"org.junit.jupiter:junit-jupiter-api\"\n    testImplementation \"io.micronaut.test:micronaut-test-junit5\"\n    testRuntimeOnly \"org.junit.jupiter:junit-jupiter-engine\"\n}\n\ntest.classpath += configurations.developmentOnly\n\nmainClassName = \"example.Application\"\n// use JUnit 5 platform\ntest {\n    useJUnitPlatform()\n}\ntasks.withType(JavaCompile){\n    options.encoding = \"UTF-8\"\n    options.compilerArgs.add('-parameters')\n}\n\nshadowJar {\n    mergeServiceFiles()\n}\n\nrun.classpath += configurations.developmentOnly\nrun.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')\n"},{"name":"hello-world-java/settings.gradle","type":"Gradle","content":"rootProject.name=\"example\""},{"name":"hello-world-kotlin/Dockerfile","type":"Docker","content":"FROM adoptopenjdk/openjdk11-openj9:jdk-11.0.1.13-alpine-slim\nCOPY build/libs/example-*-all.jar example.jar\nEXPOSE 8080\nCMD java -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -Dcom.sun.management.jmxremote -noverify ${JAVA_OPTS} -jar example.jar"},{"name":"hello-world-kotlin/build.gradle","type":"Gradle","content":"plugins {\n    id \"org.jetbrains.kotlin.jvm\" version \"1.3.21\"\n    id \"org.jetbrains.kotlin.kapt\" version \"1.3.21\"\n    id \"org.jetbrains.kotlin.plugin.allopen\" version \"1.3.21\"\n    id \"com.github.johnrengelman.shadow\" version \"5.0.0\"\n    id \"application\"\n}\n\n\n\nversion \"0.1\"\ngroup \"example\"\n\nrepositories {\n    mavenCentral()\n    maven { url \"https://jcenter.bintray.com\" }\n}\n\nconfigurations {\n    // for dependencies that are needed for development only\n    developmentOnly \n}\n\ndependencies {\n    implementation platform(\"io.micronaut:micronaut-bom:$micronautVersion\")\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}\"\n    implementation \"org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}\"\n    implementation \"io.micronaut:micronaut-runtime\"\n    implementation \"io.swagger.core.v3:swagger-annotations\"\n    implementation \"io.micronaut:micronaut-http-server-netty\"\n    implementation \"io.micronaut:micronaut-http-client\"\n    kapt platform(\"io.micronaut:micronaut-bom:$micronautVersion\")\n    kapt \"io.micronaut:micronaut-inject-java\"\n    kapt \"io.micronaut:micronaut-validation\"\n    kapt \"io.micronaut.configuration:micronaut-openapi\"\n    kaptTest platform(\"io.micronaut:micronaut-bom:$micronautVersion\")\n    kaptTest \"io.micronaut:micronaut-inject-java\"\n    runtimeOnly \"com.fasterxml.jackson.module:jackson-module-kotlin:2.9.8\"\n    runtimeOnly \"ch.qos.logback:logback-classic:1.2.3\"\n    testImplementation \"org.junit.jupiter:junit-jupiter-api\"\n    testImplementation \"io.micronaut.test:micronaut-test-junit5\"\n    testImplementation \"org.mockito:mockito-junit-jupiter:2.22.0\"\n    testRuntimeOnly \"org.junit.jupiter:junit-jupiter-engine\"    \n    testRuntimeOnly \"org.jetbrains.spek:spek-junit-platform-engine:1.1.5\"\n}\n\ntest.classpath += configurations.developmentOnly\n\nmainClassName = \"example.Application\"\n\ntest {\n    useJUnitPlatform()\n}\n\nallOpen {\n\tannotation(\"io.micronaut.aop.Around\")\n}\n\ncompileKotlin {\n\tkotlinOptions {\n\t    jvmTarget = '1.8' \n\t    //Will retain parameter names for Java reflection\n\t    javaParameters = true \n\t}\n}\n\ncompileTestKotlin {\n\tkotlinOptions {\n\t    jvmTarget = '1.8' \n\t    javaParameters = true \n\t}\n}\n\nshadowJar {\n    mergeServiceFiles()\n}\n\nrun.classpath += configurations.developmentOnly\nrun.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')\n"},{"name":"hello-world-kotlin/settings.gradle","type":"Gradle","content":"rootProject.name=\"example\""},{"name":"hello-world-lambda/Dockerfile","type":"Docker","content":"FROM openjdk:8-jre-alpine\n\nRUN addgroup -S app \u0026\u0026 adduser -S -g app app\n\nWORKDIR /app\nCOPY build/libs/*-all.jar /app/Handler.jar\n\nRUN apk --no-cache add curl \\\n    \u0026\u0026 echo \"Pulling watchdog binary from Github.\" \\\n    \u0026\u0026 curl -sSL https://github.com/openfaas/faas/releases/download/0.8.0/fwatchdog \u003e /usr/bin/fwatchdog \\\n    \u0026\u0026 chmod +x /usr/bin/fwatchdog \\\n    \u0026\u0026 cp /usr/bin/fwatchdog /home/app \\\n    \u0026\u0026 apk del curl --no-cache\n\nUSER app\n\nENV fprocess=\"xargs java -noverify -XX:TieredStopAtLevel=1 -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -jar Handler.jar -d\"\n\nHEALTHCHECK --interval=1s CMD [ -e /tmp/.lock ] || exit 1\n\nCMD [\"fwatchdog\"]\n"},{"name":"hello-world-lambda/build.gradle","type":"Gradle","content":"plugins {\n    id \"io.spring.dependency-management\" version \"1.0.6.RELEASE\"\n    id \"com.github.johnrengelman.shadow\" version \"4.0.2\"\n    id \"jp.classmethod.aws.lambda\" version \"0.38\"\n    id \"groovy\"\n    id \"application\"\n}\n\nrepositories {\n    mavenCentral()\n    maven { url \"https://jcenter.bintray.com\" }\n}\n\ndependencyManagement {\n    imports {\n        mavenBom 'io.micronaut:micronaut-bom:1.1.0'\n    }\n}\n\nconfigurations {\n    // for dependencies that are needed for development only\n    developmentOnly\n}\n\ndependencies {\n    compile \"io.micronaut:micronaut-runtime-groovy\"\n    compile \"io.micronaut:micronaut-validation\"\n    compile \"io.micronaut:micronaut-function-groovy\"\n    compileOnly \"io.micronaut:micronaut-inject-groovy\"\n    runtime \"com.amazonaws:aws-lambda-java-log4j2:1.0.0\"\n    runtime \"org.apache.logging.log4j:log4j-slf4j-impl:2.9.1\"\n    testCompile \"io.micronaut:micronaut-inject-groovy\"\n    testCompile(\"org.spockframework:spock-core\") {\n        exclude group: \"org.codehaus.groovy\", module: \"groovy-all\"\n    }\n    testCompile \"io.micronaut.test:micronaut-test-spock:1.0.1\"\n    testCompile \"io.micronaut:micronaut-function-client\"\n    testRuntime \"io.micronaut:micronaut-http-server-netty\"\n    testRuntime \"io.micronaut:micronaut-function-web\"\n    testRuntime group: 'com.amazonaws', name: 'aws-java-sdk-lambda', version: '1.11.285'\n}\n\ntest.classpath += configurations.developmentOnly\nshadowJar {\n    transform(com.github.jengelman.gradle.plugins.shadow.transformers.Log4j2PluginsCacheFileTransformer)\n}\ntasks.withType(GroovyCompile) {\n    groovyOptions.forkOptions.jvmArgs.add('-Dgroovy.parameters=true')\n}\n\nshadowJar {\n    mergeServiceFiles()\n}\n\nrun.classpath += configurations.developmentOnly\nrun.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')\n\nmainClassName = \"example.HelloWorldFunction\"\napplicationDefaultJvmArgs = [\"\"]\n\njar {\n    manifest {\n        attributes 'Main-Class': mainClassName\n    }\n}\n\nif (new File(\"${System.getProperty(\"user.home\")}/.aws/credentials\").exists()) {\n    task deploy(type: jp.classmethod.aws.gradle.lambda.AWSLambdaMigrateFunctionTask, dependsOn: shadowJar) {\n        functionName = \"hello-world\"\n        handler = \"example.HelloWorldFunction::hello\"\n        role = \"arn:aws:iam::${aws.accountId}:role/lambda_basic_execution\"\n        runtime = com.amazonaws.services.lambda.model.Runtime.Java8\n        zipFile = shadowJar.archivePath\n        memorySize = 256\n        timeout = 60\n    }\n\n}\n\ntask invoke(type: jp.classmethod.aws.gradle.lambda.AWSLambdaInvokeTask) {\n    functionName = \"hello-world\"\n    invocationType = com.amazonaws.services.lambda.model.InvocationType.RequestResponse\n    payload = '{\"name\":\"Fred\"}'\n    doLast {\n        println \"Lambda function result: \" + new String(invokeResult.payload.array(), \"UTF-8\")\n    }\n}"},{"name":"petstore/api/build.gradle","type":"Gradle","content":"dependencies {\n    compile \"io.micronaut:micronaut-http:${projectVersion}\"\n    compile \"io.micronaut:micronaut-runtime:${projectVersion}\"\n    compile \"io.micronaut:micronaut-validation:${projectVersion}\"\n}\ncompileJava {\n    options.compilerArgs += [\"-parameters\"]\n}\n"},{"name":"petstore/build.gradle","type":"Gradle","content":"buildscript {\n    repositories {\n        maven {\n            url \"https://plugins.gradle.org/m2/\"\n        }\n    }\n    dependencies {\n        classpath \"com.github.jengelman.gradle.plugins:shadow:2.0.2\"\n        classpath \"io.spring.gradle:dependency-management-plugin:1.0.5.RELEASE\"\n    }\n}\nsubprojects { project -\u003e\n\n    if(!project.path.contains(':frontend')) {\n        apply plugin:\"java\"\n        apply plugin:\"io.spring.dependency-management\"\n\n        if(project.name != 'api' \u0026\u0026 project.name != 'functions') {\n\n            apply plugin:\"application\"\n            apply plugin: 'com.github.johnrengelman.shadow'\n            shadowJar {\n                mergeServiceFiles()\n            }\n        }\n\n        repositories {\n            mavenLocal()\n            jcenter()            \n        }\n\n        dependencyManagement {\n            imports {\n                mavenBom \"io.micronaut:micronaut-bom:$projectVersion\"\n            }\n        }\n\n\n        dependencies {\n            if(project.name != 'api' \u0026\u0026 !project.path.contains(':functions') \u0026\u0026 !project.path.contains(':frontend')) {\n\n                compile \"io.micronaut:micronaut-discovery-client\"\n                compile \"io.micronaut.configuration:micronaut-hibernate-validator\"\n                runtime \"io.micronaut:micronaut-management\"\n                runtime \"ch.qos.logback:logback-classic:1.2.3\"\n            }\n        }\n    }\n\n}\n"},{"name":"petstore/comments/Dockerfile","type":"Docker","content":"FROM java:openjdk-8u111-alpine\nRUN apk --no-cache add curl\nCMD ./wait-for -t 300 $CONSUL_HOST:$CONSUL_PORT -- \\\n        ./wait-for -t 300 $NEO4J_HOST:$NEO4J_PORT -- \\\n        echo \"All dependencies ready. Starting application...\" \u0026\u0026 \\\n        java ${JAVA_OPTS} -jar comments-all.jar\nCOPY build/libs/*-all.jar comments-all.jar\nCOPY wait-for wait-for"},{"name":"petstore/comments/build.gradle","type":"Gradle","content":"apply plugin: 'groovy'\n\nmainClassName = \"example.comments.Application\"\n\nrepositories {\n    maven { url \"https://repo.grails.org/grails/core\" }\n}\n\ndependencies {\n    compileOnly \"io.micronaut:micronaut-inject-groovy\"\n\n    compile \"org.codehaus.groovy:groovy:2.5.1\"\n    compile project(\":api\")\n    compile \"io.micronaut.configuration:micronaut-neo4j-gorm\"\n\n    compile \"io.micronaut:micronaut-http-server-netty\"\n    compile \"io.micronaut:micronaut-discovery-client\"\n\n    testCompile \"io.micronaut:micronaut-inject-groovy\"\n    testCompile(\"org.spockframework:spock-core:1.1-groovy-2.4\") {\n        exclude module:'groovy-all'\n    }\n    compile \"org.codehaus.groovy:groovy-json:\"\n    testRuntime \"org.neo4j.test:neo4j-harness:3.3.3\"\n    testRuntime 'io.netty:netty-transport-native-epoll:4.1.25.Final'\n}\n"},{"name":"petstore/docker-compose.yml","type":"Docker","content":"version: '3'\nservices:\n  neo4j:\n    image: neo4j\n    environment:\n      NEO4J_AUTH: none\n    ports:\n      - 7687:7687\n      - 7474:7474\n  mongodb:\n    image: mongo\n    ports:\n      - 27017:27017\n  redis:\n    image: redis\n    ports:\n      - 6379:6379\n  consul:\n    image: consul\n    ports:\n      - 8500:8500\n  pets:\n    build: ./pets\n    links:\n      - mongodb\n      - consul\n    environment:\n      MICRONAUT_SERVER_HOST: pets\n      MICRONAUT_SERVER_PORT: 8080\n      MONGO_HOST: mongodb\n      MONGO_PORT: 27017\n      CONSUL_HOST: consul\n      CONSUL_PORT: 8500\n  vendors:\n    build: ./vendors\n    links:\n      - consul\n    environment:\n      MICRONAUT_SERVER_HOST: vendors\n      MICRONAUT_SERVER_PORT: 8080\n      CONSUL_HOST: consul\n      CONSUL_PORT: 8500\n  offers:\n    build: ./offers\n    links:\n      - storefront\n      - redis\n      - pets\n      - consul\n    environment:\n      MICRONAUT_SERVER_HOST: offers\n      MICRONAUT_SERVER_PORT: 8080\n      CONSUL_HOST: consul\n      CONSUL_PORT: 8500\n      REDIS_HOST: redis\n      REDIS_PORT: 6379\n  comments:\n    build: ./comments\n    links:\n      - neo4j\n      - consul\n    environment:\n      MICRONAUT_SERVER_HOST: comments\n      MICRONAUT_SERVER_PORT: 8080\n      NEO4J_HOST: neo4j\n      NEO4J_PORT: 7687\n      CONSUL_HOST: consul\n      CONSUL_PORT: 8500\n  mail:\n    build: ./mail\n    links:\n      - consul\n    environment:\n      MICRONAUT_SERVER_HOST: mail\n      MICRONAUT_SERVER_PORT: 8080\n      CONSUL_HOST: consul\n      CONSUL_PORT: 8500\n  storefront:\n    build: ./storefront\n    ports:\n      - \"8080:8080\"\n    links:\n      - pets\n      - vendors\n      - comments\n    environment:\n      MICRONAUT_SERVER_HOST: storefront\n      CONSUL_HOST: consul\n      CONSUL_PORT: 8500\n  frontend:\n    build: ./frontend/react\n    links:\n      - storefront\n    ports:\n      - 3000:3000\n    volumes:\n      - ./frontend/react/src:/usr/src/app/src\n      - ./frontend/react/public:/usr/src/app/public\n"},{"name":"petstore/frontend/react/Dockerfile","type":"Docker","content":"FROM node:latest\n\nRUN mkdir -p /usr/src/app\nWORKDIR /usr/src/app\n\nCOPY package.json /usr/src/app/\nRUN npm install\n\nCMD [ \"npm\", \"start\" ]"},{"name":"petstore/frontend/react/build.gradle","type":"Gradle","content":"plugins {\n    id \"com.moowork.node\" version \"1.2.0\"\n}\n\nnode {\n    version = '10.14.0'\n    yarnVersion = '1.12.3'\n    download = true\n}\n\ntask start(type: YarnTask, dependsOn: 'yarn') {\n    group = 'application'\n    description = 'Run the app'\n    args = ['run', 'start']\n}\n\ntask build(type: YarnTask, dependsOn: 'yarn') {\n    group = 'build'\n    description = 'Build the client bundle'\n    args = ['run', 'build']\n}\n\ntask test(type: YarnTask, dependsOn: 'yarn') {\n    group = 'verification'\n    description = 'Run the client tests'\n    args = ['run', 'test']\n}\n\ntask eject(type: YarnTask, dependsOn: 'yarn') {\n    group = 'other'\n    description = 'Eject from the create-react-app scripts'\n    args = ['run', 'eject']\n}\n"},{"name":"petstore/functions/tweet/build.gradle","type":"Gradle","content":"import jp.classmethod.aws.gradle.lambda.*\nimport com.amazonaws.services.lambda.model.*\n\nbuildscript {\n    repositories {\n        mavenCentral()\n        maven { url \"https://plugins.gradle.org/m2/\" }\n        mavenLocal()\n\n    }\n    dependencies {\n        classpath \"jp.classmethod.aws:gradle-aws-plugin:0.22\"\n\n    }\n}\n\nplugins {\n    id 'nebula.provided-base' version '3.0.3' // if you want provided-base\n}\n\napply plugin:\"groovy\"\napply plugin: 'jp.classmethod.aws.lambda'\nmainClassName = \"example.function.tweet.UpdateStatusFunction\"\n\n\ndependencies {\n    compileOnly \"io.micronaut:micronaut-inject-java\"\n    compile 'org.twitter4j:twitter4j-core:4.0.6'\n\n    compile \"io.micronaut:micronaut-inject-groovy\"\n    compile \"io.micronaut:micronaut-function-groovy\"\n\n\n    runtime \"com.amazonaws:aws-lambda-java-log4j2:1.0.0\"\n    runtime 'org.apache.logging.log4j:log4j-slf4j-impl:2.9.1'\n\n    testCompile \"io.micronaut:micronaut-http-client\"\n    testRuntime \"io.micronaut:micronaut-discovery-client\"\n    testRuntime \"io.micronaut:micronaut-function-web\"\n    testRuntime \"io.micronaut:micronaut-http-server-netty\"\n\n    testCompile(\"org.spockframework:spock-core:1.1-groovy-2.4\") {\n        exclude module:'groovy-all'\n    }\n\n}\n\n// NOTE: the AWS gradle plugin does not support altering environment variables so after\n// deployment you have to go the console and set:\n// - TWITTER_OAUTH_CONSUMER_KEY\n// - TWITTER_OAUTH_CONSUMER_SECRET\n// - TWITTER_OAUTH_ACCESS_TOKEN\n// - TWITTER_OAUTH_ACCESS_TOKEN_SECRET\ntask deploy(type: AWSLambdaMigrateFunctionTask, dependsOn: shadowJar) {\n    functionName = \"twitter-update-status\"\n    handler = \"example.function.tweet.UpdateStatusFunction::updateStatus\"\n    // ACTIVATE THIS FOR AWS Identity management\n    //role = \"arn:aws:iam::${aws.accountId}:role/lambda_basic_execution\"\n    runtime = Runtime.Java8\n    zipFile = shadowJar.archivePath\n    memorySize = 256\n    timeout = 60\n}\n\ntask invoke(type: AWSLambdaInvokeTask) {\n    functionName = \"twitter-update-status\"\n    invocationType = InvocationType.RequestResponse\n    payload = '{\"text\":\"Time is '+System.currentTimeMillis()+'\"}'\n    doLast {\n        println \"Lambda function result: \" + new String(invokeResult.payload.array(), \"UTF-8\")\n    }\n}"},{"name":"petstore/mail/Dockerfile","type":"Docker","content":"FROM java:openjdk-8u111-alpine\nRUN apk --no-cache add curl\nCMD ./wait-for -t 300 $CONSUL_HOST:$CONSUL_PORT -- \\\n    echo \"All dependencies ready. Starting application...\" \u0026\u0026 \\\n    java ${JAVA_OPTS} -jar mail-all.jar\nCOPY build/libs/*-all.jar mail-all.jar\nCOPY wait-for wait-for"},{"name":"petstore/mail/build.gradle","type":"Gradle","content":"mainClassName = \"example.mail.Application\"\n\napply plugin: 'groovy'\n\ndependencies {\n    compileOnly \"io.micronaut:micronaut-inject-java\"\n\n    compile project(\":api\")\n    compile \"io.micronaut:micronaut-http-server-netty\"\n    compile \"io.micronaut:micronaut-discovery-client\"\n\n    compile 'com.amazonaws:aws-java-sdk-ses:1.11.285'\n    compile 'com.sendgrid:sendgrid-java:4.1.2'\n\n    testCompile \"junit:junit:4.12\"\n\n    testCompile \"io.micronaut:micronaut-inject-java\"\n    testCompile \"io.micronaut:micronaut-http-client\"\n}\nshadowJar {\n    mergeServiceFiles()\n}"},{"name":"petstore/offers/Dockerfile","type":"Docker","content":"FROM java:openjdk-8u111-alpine\nRUN apk --no-cache add curl\nCMD ./wait-for -t 300 $CONSUL_HOST:$CONSUL_PORT -- \\\n        ./wait-for -t 300 $REDIS_HOST:$REDIS_PORT -- \\\n        ./wait-for -t 300 pets:8080 -- \\\n        ./wait-for -t 300 storefront:8080 -- \\\n        echo \"All dependencies ready. Starting application...\" \u0026\u0026 \\\n        java ${JAVA_OPTS} -jar offers-all.jar\nCOPY build/libs/*-all.jar offers-all.jar\nCOPY wait-for wait-for"},{"name":"petstore/offers/build.gradle","type":"Gradle","content":"mainClassName = \"example.offers.Application\"\n\napply plugin: 'groovy'\n\ndependencies {\n    compileOnly \"io.micronaut:micronaut-inject-java\"\n\n    compile project(\":api\")\n    compile \"io.micronaut.configuration:micronaut-hibernate-validator\"\n    compile \"io.micronaut:micronaut-http-server-netty\"\n    compile \"io.micronaut:micronaut-discovery-client\"\n\n\n    compile \"io.micronaut.configuration:micronaut-redis-lettuce\"\n\n    compile \"io.micronaut:micronaut-runtime\"\n\n    testCompile \"junit:junit:4.12\"\n    testCompile \"io.micronaut:micronaut-inject-groovy\"\n    testCompile \"io.micronaut:micronaut-http-client\"\n\n    testCompile \"org.codehaus.groovy:groovy\"\n    testCompile(\"org.spockframework:spock-core:1.1-groovy-2.4\") {\n        exclude module:'groovy-all'\n    }\n    \n    testRuntime \"com.github.kstyrc:embedded-redis:0.6\"\n}\nshadowJar {\n    mergeServiceFiles()\n}"},{"name":"petstore/pets/Dockerfile","type":"Docker","content":"FROM java:openjdk-8u111-alpine\nRUN apk --no-cache add curl\nCMD ./wait-for -t 300 $CONSUL_HOST:$CONSUL_PORT -- \\\n        ./wait-for -t 300 $MONGO_HOST:$MONGO_PORT -- \\\n        echo \"All dependencies ready. Starting application...\" \u0026\u0026 \\\n        java ${JAVA_OPTS} -jar pets-all.jar\nCOPY build/libs/*-all.jar pets-all.jar\nCOPY wait-for wait-for"},{"name":"petstore/pets/build.gradle","type":"Gradle","content":"mainClassName = \"example.pets.Application\"\n\ndependencies {\n    annotationProcessor \"io.micronaut:micronaut-inject-java\"\n    annotationProcessor \"io.micronaut.configuration:micronaut-openapi\"\n    compile \"io.micronaut.configuration:micronaut-openapi\"\n\n    compileOnly \"io.micronaut:micronaut-inject-java\"\n\n    compile project(\":api\")\n    compile \"io.micronaut.configuration:micronaut-hibernate-validator\"\n    compile \"io.micronaut:micronaut-http-server-netty\"\n    compile \"io.micronaut:micronaut-discovery-client\"\n\n    \n    compile \"io.micronaut.configuration:micronaut-mongo-reactive\"\n\n    compile \"io.micronaut:micronaut-runtime\"\n\n    compile \"io.micronaut.configuration:micronaut-netflix-hystrix\"\n\n    testCompile \"junit:junit:4.12\"\n    testCompile \"io.micronaut:micronaut-inject-java\"\n    testCompile \"io.micronaut:micronaut-http-client\"\n    testRuntime \"de.flapdoodle.embed:de.flapdoodle.embed.mongo:2.0.1\"\n}\nshadowJar {\n    mergeServiceFiles()\n}"},{"name":"petstore/settings.gradle","type":"Gradle","content":"include \"api\"\ninclude \"comments\"\ninclude \"offers\"\ninclude \"storefront\"\ninclude \"vendors\"\n//include \"people\"\ninclude \"pets\"\ninclude \"mail\"\ninclude \"functions:tweet\"\ninclude \"frontend:react\""},{"name":"petstore/storefront/Dockerfile","type":"Docker","content":"FROM java:openjdk-8u111-alpine\nRUN apk --no-cache add curl\nCMD ./wait-for -t 300 $CONSUL_HOST:$CONSUL_PORT -- \\\n        ./wait-for -t 300 pets:8080 -- \\\n        ./wait-for -t 300 vendors:8080 -- \\\n        ./wait-for -t 300 comments:8080 -- \\\n        echo \"All dependencies ready. Starting application...\" \u0026\u0026 \\\n        java ${JAVA_OPTS} -jar storefront-all.jar\nCOPY build/libs/*-all.jar storefront-all.jar\nCOPY wait-for wait-for"},{"name":"petstore/storefront/build.gradle","type":"Gradle","content":"apply plugin: 'groovy'\n\nmainClassName = \"example.storefront.Application\"\n\ndependencies {\n  compileOnly \"io.micronaut:micronaut-inject-groovy\"\n  compileOnly \"io.micronaut:micronaut-inject-java\"\n  compile \"io.micronaut:micronaut-runtime-groovy\"\n  compile \"io.micronaut:micronaut-http-server-netty\"\n  compile project(\":api\")\n  compile \"io.micronaut:micronaut-http-client\"\n  compile \"io.micronaut:micronaut-function-client\"\n\n\n  testCompile(\"org.spockframework:spock-core:1.1-groovy-2.4\") {\n        exclude module:'groovy-all'\n  }\n}\n"},{"name":"petstore/vendors/Dockerfile","type":"Docker","content":"FROM java:openjdk-8u111-alpine\nRUN apk --no-cache add curl\nCMD ./wait-for -t 300 $CONSUL_HOST:$CONSUL_PORT -- \\\n        echo \"All dependencies ready. Starting application...\" \u0026\u0026 \\\n        java ${JAVA_OPTS} -jar vendors-all.jar\nCOPY build/libs/*-all.jar vendors-all.jar\nCOPY wait-for wait-for\n"},{"name":"petstore/vendors/build.gradle","type":"Gradle","content":"apply plugin: 'groovy'\nmainClassName = \"example.vendors.Application\"\ndependencies {\n    compileOnly \"io.micronaut:micronaut-inject-groovy\"\n\n    compile \"org.codehaus.groovy:groovy:2.5.1\"\n    compile project(\":api\")\n\n    compile \"io.micronaut.configuration:micronaut-hibernate-validator\"\n    compile \"io.micronaut.configuration:micronaut-hibernate-gorm\"\n\n    compile \"io.micronaut:micronaut-http-server-netty\"\n    compile \"io.micronaut:micronaut-discovery-client\"\n\n    compile \"io.micronaut:micronaut-runtime-groovy\"\n    runtime 'org.apache.tomcat:tomcat-jdbc:8.0.44'\n    runtime 'com.h2database:h2:1.4.196'\n\n    testCompile \"io.micronaut:micronaut-inject-groovy\"\n    testCompile(\"org.spockframework:spock-core:1.1-groovy-2.4\") {\n        exclude module:'groovy-all'\n    }\n}\n"},{"name":"websocket-chat/Dockerfile","type":"Docker","content":"FROM openjdk:8u171-alpine3.7\nRUN apk --no-cache add curl\nCOPY build/libs/*-all.jar websocket-chat.jar\nCMD java ${JAVA_OPTS} -jar websocket-chat.jar"},{"name":"websocket-chat/build.gradle","type":"Gradle","content":"plugins {\n    id \"io.spring.dependency-management\" version \"1.0.6.RELEASE\"\n    id \"java\"\n    id \"net.ltgt.apt-eclipse\" version \"0.21\"\n    id \"net.ltgt.apt-idea\" version \"0.21\"\n    id \"com.github.johnrengelman.shadow\" version \"4.0.2\"\n    id \"application\"\n}\n\nversion \"0.1\"\ngroup \"websocket.chat\"\n\nrepositories {\n    mavenCentral()\n    maven { url \"https://jcenter.bintray.com\" }\n}\n\ndependencyManagement {\n    imports {\n        mavenBom 'io.micronaut:micronaut-bom:1.1.0'\n    }\n}\n\nconfigurations {\n    // for dependencies that are needed for development only\n    developmentOnly\n}\n\ndependencies {\n    annotationProcessor \"io.micronaut:micronaut-inject-java\"\n    annotationProcessor \"io.micronaut:micronaut-validation\"\n    compile \"io.micronaut:micronaut-inject\"\n    compile \"io.micronaut:micronaut-validation\"\n    compile \"io.micronaut:micronaut-runtime\"\n    compile \"io.micronaut:micronaut-http-client\"\n    compile \"io.micronaut:micronaut-http-server-netty\"\n    runtime \"ch.qos.logback:logback-classic:1.2.3\"\n    testAnnotationProcessor \"io.micronaut:micronaut-inject-java\"\n    testCompile \"org.junit.jupiter:junit-jupiter-api\"\n    testCompile \"io.micronaut.test:micronaut-test-junit5\"\n    testRuntime \"org.junit.jupiter:junit-jupiter-engine\"\n}\n\ntest.classpath += configurations.developmentOnly\n\nmainClassName = \"websocket.chat.Application\"\n// use JUnit 5 platform\ntest {\n    useJUnitPlatform()\n}\ntasks.withType(JavaCompile){\n    options.encoding = \"UTF-8\"\n    options.compilerArgs.add('-parameters')\n}\n\nshadowJar {\n    mergeServiceFiles()\n}\n\nrun.classpath += configurations.developmentOnly\nrun.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')\n"}]}
